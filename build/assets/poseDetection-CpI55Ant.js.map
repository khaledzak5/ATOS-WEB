{"version":3,"file":"poseDetection-CpI55Ant.js","sources":["../../src/utils/poseDetection.js"],"sourcesContent":["// Pose detection utilities using MediaPipe\nclass PoseDetectionUtils {\n  constructor() {\n    this.pose = null;\n    this.isInitialized = false;\n    this.pushupState = 'up'; // up, down, transition\n    this.pushupCount = 0;\n    this.postureStatus = 'unknown'; // correct, incorrect, unknown\n    this.lastWarningTime = 0;\n    this.videoDimensionsLogged = false;\n    // Exercise mode and timing\n    this.exerciseMode = 'pushups'; // 'pushups' | 'plank' | 'squats' | 'lunges'\n    this.accumulatedCorrectMs = 0;\n    this.timerRunning = false;\n    this.startCorrectTimestampMs = 0;\n    this.onPushupCount = null;\n    this.onPostureChange = null;\n    this.onFormFeedback = null;\n    this.onTimeUpdate = null; // for plank seconds updates\n  }\n\n  setExerciseMode(mode) {\n    const normalized = String(mode || '').toLowerCase();\n    if (normalized === 'plank') this.exerciseMode = 'plank';\n    else if (normalized === 'squats' || normalized === 'squat') this.exerciseMode = 'squats';\n    else if (normalized === 'lunges' || normalized === 'lunge') this.exerciseMode = 'lunges';\n    else if (normalized === 'burpees' || normalized === 'burpee') this.exerciseMode = 'burpees';\n    else if (normalized.includes('mountain') || normalized.includes('climber')) this.exerciseMode = 'mountainclimbers';\n    else this.exerciseMode = 'pushups';\n  }\n\n  // Initialize MediaPipe Pose\n  async initialize() {\n    try {\n      console.log('üöÄ Initializing MediaPipe Pose...');\n      \n      // Wait for MediaPipe to load if not ready\n      if (!window.Pose) {\n        console.warn('MediaPipe Pose not loaded yet, waiting...');\n        // Wait up to 10 seconds for MediaPipe to load\n        let attempts = 0;\n        while (!window.Pose && attempts < 50) {\n          await new Promise(resolve => setTimeout(resolve, 200));\n          attempts++;\n          if (attempts % 10 === 0) {\n            console.log(`Still waiting for MediaPipe... (${attempts * 200}ms)`);\n          }\n        }\n        \n        if (!window.Pose) {\n          console.error('MediaPipe Pose failed to load after waiting');\n          return false;\n        }\n      }\n      \n      console.log('‚úÖ MediaPipe Pose found in window object');\n\n      this.pose = new window.Pose({\n        locateFile: (file) => {\n          return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n        }\n      });\n\n      const config = window.MediaPipeConfig?.POSE_CONFIG || {\n        modelComplexity: 0,\n        smoothLandmarks: true,\n        enableSegmentation: false,\n        smoothSegmentation: false,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      };\n\n      this.pose.setOptions(config);\n      this.pose.onResults(this.onResults.bind(this));\n      \n      this.isInitialized = true;\n      console.log('MediaPipe Pose initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize MediaPipe Pose:', error);\n      return false;\n    }\n  }\n\n  // Process video frame\n  async processFrame(videoElement) {\n    if (!this.isInitialized || !this.pose) {\n      console.log('‚ùå Pose not initialized or missing');\n      return null;\n    }\n\n    try {\n      // Only log occasionally to avoid spam\n      if (Math.random() < 0.05) {\n        console.log('üìπ Processing frame...');\n      }\n      \n      // Check if video dimensions are reasonable\n      if (videoElement.videoWidth === 0 || videoElement.videoHeight === 0) {\n        if (Math.random() < 0.1) {\n          console.log('‚è≥ Video dimensions not ready yet');\n        }\n        return;\n      }\n      \n      // Log video dimensions only once per session\n      if (!this.videoDimensionsLogged) {\n        console.log(`üìè Video dimensions: ${videoElement.videoWidth}x${videoElement.videoHeight}`);\n        this.videoDimensionsLogged = true;\n      }\n      \n      // Allow larger videos but with a reasonable limit\n      const maxWidth = 1920;\n      const maxHeight = 1080;\n      if (videoElement.videoWidth > maxWidth || videoElement.videoHeight > maxHeight) {\n        console.log('‚ö†Ô∏è Video too large (>1920x1080), skipping frame');\n        return;\n      }\n      \n      await this.pose.send({ image: videoElement });\n    } catch (error) {\n      if (error.message?.includes('memory access out of bounds')) {\n        console.warn('üîÑ Memory error, skipping frame');\n        return;\n      }\n      console.error('Error processing frame:', error);\n    }\n  }\n\n  // Handle pose detection results\n  onResults(results) {\n    console.log('üéØ onResults called!', results.poseLandmarks ? `Found ${results.poseLandmarks.length} landmarks` : 'No landmarks');\n    \n    // Store results for drawing\n    this.lastResults = results;\n    \n    if (!results.poseLandmarks) {\n      this.postureStatus = 'unknown';\n      if (this.onPostureChange) {\n        this.onPostureChange('unknown', null);\n      }\n      // Stop plank timer if running\n      if (this.timerRunning) {\n        this.accumulatedCorrectMs += Date.now() - this.startCorrectTimestampMs;\n        this.timerRunning = false;\n        this.startCorrectTimestampMs = 0;\n        if (this.onTimeUpdate) {\n          this.onTimeUpdate(Math.floor(this.accumulatedCorrectMs / 1000));\n        }\n      }\n      return;\n    }\n\n    const landmarks = results.poseLandmarks;\n    \n    // For squats, lunges, pushups, burpees: always show correct posture to avoid confusion\n    if (this.exerciseMode === 'squats' || this.exerciseMode === 'lunges' || this.exerciseMode === 'pushups' || this.exerciseMode === 'burpees') {\n      this.postureStatus = 'correct';\n      if (this.onPostureChange) {\n        this.onPostureChange('correct', landmarks);\n      }\n    } else {\n      // Check posture for other exercises\n      const isPostureCorrect = this.checkBackAlignment(landmarks);\n      const newPostureStatus = isPostureCorrect ? 'correct' : 'incorrect';\n      \n      if (newPostureStatus !== this.postureStatus) {\n        this.postureStatus = newPostureStatus;\n        if (this.onPostureChange) {\n          this.onPostureChange(this.postureStatus, landmarks);\n        }\n      }\n\n      // Handle posture warnings for plank only (pushups now work like squats/lunges)\n      if (!isPostureCorrect) {\n        const currentTime = Date.now();\n        const cooldown = window.MediaPipeConfig?.PLANK_CONFIG?.WARNING_COOLDOWN || 2000;\n        \n        if (currentTime - this.lastWarningTime > cooldown) {\n          this.playWarningSound();\n          this.lastWarningTime = currentTime;\n          \n          if (this.onFormFeedback) {\n            this.onFormFeedback({\n              message: \"Dangerous posture - straighten your back!\",\n              type: \"warning\",\n              timestamp: currentTime\n            });\n          }\n        }\n        // Stop plank timer while incorrect\n        if (this.exerciseMode === 'plank' && this.timerRunning) {\n          this.accumulatedCorrectMs += currentTime - this.startCorrectTimestampMs;\n          this.timerRunning = false;\n          this.startCorrectTimestampMs = 0;\n          if (this.onTimeUpdate) {\n            this.onTimeUpdate(Math.floor(this.accumulatedCorrectMs / 1000));\n          }\n        }\n        return; // Don't count reps with bad posture for plank only\n      }\n    }\n\n    // Posture is correct\n    if (this.exerciseMode === 'plank') {\n      const now = Date.now();\n      if (!this.timerRunning) {\n        this.startCorrectTimestampMs = now;\n        this.timerRunning = true;\n      }\n      const totalMs = this.accumulatedCorrectMs + (now - (this.startCorrectTimestampMs || now));\n      const seconds = Math.floor(totalMs / 1000);\n      if (this.onTimeUpdate) this.onTimeUpdate(seconds);\n      return;\n    }\n\n    // Count reps depending on mode\n      if (this.exerciseMode === 'squats') {\n        this.updateSquatCounter(landmarks);\n      } else if (this.exerciseMode === 'lunges') {\n        this.updateLungesCounter(landmarks);\n      } else if (this.exerciseMode === 'burpees') {\n        this.updateBurpeesCounter(landmarks);\n      } else if (this.exerciseMode === 'mountainclimbers') {\n        this.updateMountainClimbersCounter(landmarks);\n      } else {\n        this.updatePushupCounter(landmarks);\n      }\n  }\n\n  // Calculate angle between three points\n  calculateAngle(point1, point2, point3) {\n    const radians = Math.atan2(point3.y - point2.y, point3.x - point2.x) - \n                   Math.atan2(point1.y - point2.y, point1.x - point2.x);\n    let angle = Math.abs(radians * 180.0 / Math.PI);\n    \n    if (angle > 180.0) {\n      angle = 360 - angle;\n    }\n    \n    return angle;\n  }\n\n  // Check back alignment for posture\n  checkBackAlignment(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const leftShoulder = landmarks[config.LEFT_SHOULDER || 11];\n      const leftHip = landmarks[config.LEFT_HIP || 23];\n      const leftAnkle = landmarks[config.LEFT_ANKLE || 27];\n\n      // Require visibility\n      const vis = (p) => p && (p.visibility == null || p.visibility > 0.5);\n      if (!vis(leftShoulder) || !vis(leftHip) || !vis(leftAnkle)) {\n        return false;\n      }\n\n      // Calculate center points\n      const shoulderCenter = {\n        x: (leftShoulder.x + leftShoulder.x) / 2,\n        y: (leftShoulder.y + leftShoulder.y) / 2\n      };\n      \n      const hipCenter = {\n        x: (leftHip.x + leftHip.x) / 2,\n        y: (leftHip.y + leftHip.y) / 2\n      };\n      \n      const ankleCenter = {\n        x: (leftAnkle.x + leftAnkle.x) / 2,\n        y: (leftAnkle.y + leftAnkle.y) / 2\n      };\n\n      // Vectors for straightness\n      const targetPoint = ankleCenter || hipCenter;\n      const v1 = { x: shoulderCenter.x - hipCenter.x, y: shoulderCenter.y - hipCenter.y };\n      const v2 = targetPoint ? { x: targetPoint.x - hipCenter.x, y: targetPoint.y - hipCenter.y } : null;\n\n      let isGoodPosture = false;\n      if (this.exerciseMode === 'plank') {\n        // ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿ®ŸÑÿßŸÜŸÉ: ÿßŸÑÿ¨ÿ≥ŸÖ ÿ£ŸÅŸÇŸä (ÿ∏Ÿáÿ± ŸÖÿ≥ÿ™ŸÇŸäŸÖ)ÿå ÿßŸÑÿ∞ÿ±ÿßÿπ ŸÖÿ≥ÿ™ŸÇŸäŸÖ ŸàŸäÿ≥ÿßŸÜÿØ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ∂ÿå ŸàÿßŸÑÿ≥ÿßŸÇ ŸÖÿ≥ÿ™ŸÇŸäŸÖÿ©\n        if (!leftShoulder || !leftHip || !leftAnkle) return false;\n        // ÿ≤ÿßŸàŸäÿ© ÿßŸÑÿ¨ÿ≥ŸÖ (ŸÉÿ™ŸÅ-Ÿàÿ±ŸÉ-ŸÉÿßÿ≠ŸÑ)\n        const plankAngle = this.calculateAngle(leftShoulder, leftHip, leftAnkle);\n        const minPlankAngle = 160; // ÿ∏Ÿáÿ± ŸÖÿ≥ÿ™ŸÇŸäŸÖ ÿ£ŸÅŸÇŸä\n        const maxPlankAngle = 190;\n        // ÿ≤ÿßŸàŸäÿ© ÿßŸÑÿ∞ÿ±ÿßÿπ (ŸÉÿ™ŸÅ-ŸÉŸàÿπ-ÿ±ÿ≥ÿ∫)\n        const leftElbow = landmarks[config.LEFT_ELBOW || 13];\n        const leftWrist = landmarks[config.LEFT_WRIST || 15];\n        if (!leftElbow || !leftWrist) return false;\n        const armAngle = this.calculateAngle(leftShoulder, leftElbow, leftWrist);\n        const minArmAngle = 150; // ÿßŸÑÿ∞ÿ±ÿßÿπ ŸÖÿ≥ÿ™ŸÇŸäŸÖ ŸàŸäÿ≥ÿßŸÜÿØ\n        const maxArmAngle = 200;\n        // ÿ≤ÿßŸàŸäÿ© ÿßŸÑÿ≥ÿßŸÇ (Ÿàÿ±ŸÉ-ÿ±ŸÉÿ®ÿ©-ŸÉÿßÿ≠ŸÑ)\n        const leftKnee = landmarks[config.LEFT_KNEE || 25];\n        if (!leftKnee) return false;\n        const legAngle = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n        const minLegAngle = 160; // ÿßŸÑÿ≥ÿßŸÇ ŸÖÿ≥ÿ™ŸÇŸäŸÖÿ©\n        const maxLegAngle = 200;\n        isGoodPosture = (plankAngle >= minPlankAngle && plankAngle <= maxPlankAngle)\n          && (armAngle >= minArmAngle && armAngle <= maxArmAngle)\n          && (legAngle >= minLegAngle && legAngle <= maxLegAngle);\n      } else {\n        // Push-ups: straight line check using abs(cos)\n        let cosSim = -1;\n        if (v2) {\n          const mag1 = Math.hypot(v1.x, v1.y) || 1;\n          const mag2 = Math.hypot(v2.x, v2.y) || 1;\n          cosSim = (v1.x * v2.x + v1.y * v2.y) / (mag1 * mag2);\n        }\n        const absCos = Math.abs(Math.max(-1, Math.min(1, cosSim)));\n        isGoodPosture = v2 ? (absCos >= 0.90) : false;\n      }\n\n      console.log(`üèÉ Posture(${this.exerciseMode}): ${isGoodPosture ? 'GOOD' : 'BAD'}`);\n      \n      return isGoodPosture;\n    } catch (error) {\n      console.error('Error checking back alignment:', error);\n      return false;\n    }\n  }\n\n  // Update push-up counter\n  updatePushupCounter(landmarks) {\n    try {\n  const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n  const pushupConfig = window.MediaPipeConfig?.PUSHUP_CONFIG || {};\n  const leftShoulder = landmarks[config.LEFT_SHOULDER || 11];\n  const leftElbow = landmarks[config.LEFT_ELBOW || 13];\n  const leftWrist = landmarks[config.LEFT_WRIST || 15];\n  // ÿ™ŸÇŸäŸäŸÖ ÿßŸÑÿ®ŸÑÿßŸÜŸÉ: ÿßŸÑÿ¨ÿ≥ŸÖ ÿ£ŸÅŸÇŸä (ÿ∏Ÿáÿ± ŸÖÿ≥ÿ™ŸÇŸäŸÖ)ÿå ÿßŸÑÿ∞ÿ±ÿßÿπ ŸÖÿ≥ÿ™ŸÇŸäŸÖ ŸàŸäÿ≥ÿßŸÜÿØ ÿπŸÑŸâ ÿßŸÑÿ£ÿ±ÿ∂ÿå ŸàÿßŸÑÿ≥ÿßŸÇ ŸÖÿ≥ÿ™ŸÇŸäŸÖÿ©\n  const rightElbow = landmarks[config.RIGHT_ELBOW || 14];\n  const rightWrist = landmarks[config.RIGHT_WRIST || 16];\n\n      // Calculate elbow angles\n      const leftElbowAngle = this.calculateAngle(leftShoulder, leftElbow, leftWrist);\n      const rightElbowAngle = this.calculateAngle(rightShoulder, rightElbow, rightWrist);\n      const avgElbowAngle = (leftElbowAngle + rightElbowAngle) / 2;\n                const minArmAngle = 150; // ÿßŸÑÿ∞ÿ±ÿßÿπ ŸÖÿ≥ÿ™ŸÇŸäŸÖ ŸàŸäÿ≥ÿßŸÜÿØ\n      // Average shoulder position (for height detection)\n      const avgShoulderY = (leftShoulder.y + rightShoulder.y) / 2;\n\n      const downThreshold = pushupConfig.ELBOW_ANGLE_DOWN || 95;\n      const upThreshold = pushupConfig.ELBOW_ANGLE_UP || 155;\n      const shoulderHeightThreshold = pushupConfig.SHOULDER_HEIGHT_DOWN || 0.02;\n\n      // Push-up position: elbows bent OR shoulders close to ground\n      const pushupPosition = (avgElbowAngle <= downThreshold) || (avgShoulderY >= (1 - shoulderHeightThreshold));\n      \n      // Standing position: elbows straight\n      const standingPosition = avgElbowAngle >= upThreshold;\n\n      // Simple counting: count immediately when going down (like squats and lunges)\n      if (this.pushupState === 'up') {\n        if (pushupPosition) {\n          this.pushupState = 'down';\n          this.pushupCount += 1; // Count immediately on descent\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Push-up ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (standingPosition) {\n          this.pushupState = 'up'; // Reset state for next rep\n        }\n      }\n    } catch (error) {\n      console.error('Error updating push-up counter:', error);\n    }\n  }\n\n  // Update squat counter\n  updateSquatCounter(landmarks) {\n    try {\n      const cfg = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const scfg = window.MediaPipeConfig?.SQUAT_CONFIG || {};\n\n      const leftHip = landmarks[cfg.LEFT_HIP || 23];\n      const rightHip = landmarks[cfg.RIGHT_HIP || 24];\n      const leftKnee = landmarks[cfg.LEFT_KNEE || 25];\n      const rightKnee = landmarks[cfg.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[cfg.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[cfg.RIGHT_ANKLE || 28];\n      const leftShoulder = landmarks[cfg.LEFT_SHOULDER || 11];\n      const rightShoulder = landmarks[cfg.RIGHT_SHOULDER || 12];\n\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle || !leftShoulder || !rightShoulder) return;\n\n      // Average sides for stability\n      const hip = { x: (leftHip.x + rightHip.x) / 2, y: (leftHip.y + rightHip.y) / 2 };\n      const knee = { x: (leftKnee.x + rightKnee.x) / 2, y: (leftKnee.y + rightKnee.y) / 2 };\n      const ankle = { x: (leftAnkle.x + rightAnkle.x) / 2, y: (leftAnkle.y + rightAnkle.y) / 2 };\n      const shoulder = { x: (leftShoulder.x + rightShoulder.x) / 2, y: (leftShoulder.y + rightShoulder.y) / 2 };\n\n      // Knee angle using hip-knee-ankle\n      const kneeAngleLeft = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n      const kneeAngleRight = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n      const kneeAngle = (kneeAngleLeft + kneeAngleRight) / 2;\n\n      // Hip angle shoulder-hip-knee to detect rounding/collapse\n      const hipAngleLeft = this.calculateAngle(leftShoulder, leftHip, leftKnee);\n      const hipAngleRight = this.calculateAngle(rightShoulder, rightHip, rightKnee);\n      const hipAngle = (hipAngleLeft + hipAngleRight) / 2;\n\n      const downThreshold = scfg.KNEE_ANGLE_DOWN ?? 80;\n      const upThreshold = scfg.KNEE_ANGLE_UP ?? 165;\n      const hipAngleMin = scfg.HIP_ANGLE_MIN ?? 150;\n\n      // Count based on hip position (lower back points)\n      const hipY = hip.y; // Y position of hips (lower = deeper)\n      const kneeY = knee.y; // Y position of knees\n      \n      // Hip goes below knee level = deep squat\n      const hipBelowKnee = hipY > kneeY;\n      // Hip goes back up above knee level = standing\n      const hipAboveKnee = hipY < kneeY;\n\n      // State machine: count when hip goes down below knee level\n      if (this.pushupState === 'up') {\n        if (hipBelowKnee) {\n          this.pushupState = 'down';\n          this.pushupCount += 1;\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Squat ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (hipAboveKnee) {\n          this.pushupState = 'up';\n        }\n      }\n    } catch (error) {\n      console.error('Error updating squat counter:', error);\n    }\n  }\n\n  // Update lunges counter\n  updateLungesCounter(landmarks) {\n    try {\n      const cfg = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const lcfg = window.MediaPipeConfig?.LUNGES_CONFIG || {};\n      const leftHip = landmarks[cfg.LEFT_HIP || 23];\n      const rightHip = landmarks[cfg.RIGHT_HIP || 24];\n      const leftKnee = landmarks[cfg.LEFT_KNEE || 25];\n      const rightKnee = landmarks[cfg.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[cfg.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[cfg.RIGHT_ANKLE || 28];\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle) return;\n      // Average hip position\n      const hip = { x: (leftHip.x + rightHip.x) / 2, y: (leftHip.y + rightHip.y) / 2 };\n      // Calculate knee angles\n      const leftKneeAngle = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n      const rightKneeAngle = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n      // Determine which leg is front (more bent knee)\n      const leftKneeBent = leftKneeAngle < rightKneeAngle;\n      const frontKnee = leftKneeBent ? leftKnee : rightKnee;\n      const backKnee = leftKneeBent ? rightKnee : leftAnkle;\n      const frontKneeAngle = leftKneeBent ? leftKneeAngle : rightKneeAngle;\n      const backKneeAngle = leftKneeBent ? rightKneeAngle : leftKneeAngle;\n      // Hip position relative to front knee\n      const hipBelowFrontKnee = hip.y > frontKnee.y;\n      // Lunge position: either knee bent enough OR hips go down (very lenient)\n      const lungePosition = ((frontKneeAngle <= 85) || (backKneeAngle <= 90) || hipBelowFrontKnee);\n      // Standing position: both knees straight\n      const standingPosition = (frontKneeAngle >= 160) && (backKneeAngle >= 150);\n      // Simple counting: count immediately when going down (like squats)\n      if (this.pushupState === 'up') {\n        if (lungePosition) {\n          this.pushupState = 'down';\n          this.pushupCount += 1; // Count immediately on descent\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Lunge ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (standingPosition) {\n          this.pushupState = 'up'; // Reset state for next rep\n        }\n      }\n    } catch (error) {\n      console.error('Error updating lunges counter:', error);\n    }\n  }\n\n  // Add Burpees counter\n  // Update mountain climbers counter\n  updateMountainClimbersCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      \n      // Get key body points\n      const leftHip = landmarks[config.LEFT_HIP || 23];\n      const rightHip = landmarks[config.RIGHT_HIP || 24];\n      const leftKnee = landmarks[config.LEFT_KNEE || 25];\n      const rightKnee = landmarks[config.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[config.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[config.RIGHT_ANKLE || 28];\n\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle) return;\n\n      // Calculate vertical distances between knees and hips\n      const leftKneeToHipY = Math.abs(leftKnee.y - leftHip.y);\n      const rightKneeToHipY = Math.abs(rightKnee.y - rightHip.y);\n\n      // Initialize states if needed\n      if (!this._lastLeftKneeY) this._lastLeftKneeY = leftKnee.y;\n      if (!this._lastRightKneeY) this._lastRightKneeY = rightKnee.y;\n      if (!this._climberState) this._climberState = 'neutral';\n      if (!this._lastClimberTime) this._lastClimberTime = Date.now();\n      \n      const KNEE_THRESHOLD = 0.05; // How far the knee needs to move\n      const MIN_REP_TIME = 250; // Minimum time between reps (ms)\n      const currentTime = Date.now();\n\n      // Calculate knee movements\n      const leftKneeMove = leftKnee.y - this._lastLeftKneeY;\n      const rightKneeMove = rightKnee.y - this._lastRightKneeY;\n\n      // Check for significant knee movements in opposite directions\n      const isAlternating = (leftKneeMove > KNEE_THRESHOLD && rightKneeMove < -KNEE_THRESHOLD) ||\n                           (leftKneeMove < -KNEE_THRESHOLD && rightKneeMove > KNEE_THRESHOLD);\n\n      // State machine for counting alternating leg movements\n      if (this._climberState === 'neutral') {\n        if (isAlternating && (currentTime - this._lastClimberTime > MIN_REP_TIME)) {\n          this._climberState = 'moving';\n          this._lastClimberTime = currentTime;\n          // Count the rep\n          this.pushupCount += 1;\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            const leg = leftKneeMove > rightKneeMove ? 'Left' : 'Right';\n            this.onFormFeedback({\n              message: `${leg} knee drive - Rep ${this.pushupCount}`,\n              type: 'success',\n              timestamp: currentTime\n            });\n          }\n        }\n      } else if (this._climberState === 'moving') {\n        if (!isAlternating) {\n          this._climberState = 'neutral';\n        }\n      }\n\n      // Update last positions\n      this._lastLeftKneeY = leftKnee.y;\n      this._lastRightKneeY = rightKnee.y;\n\n      // Form feedback for incorrect movement\n      if (Math.abs(leftHip.y - rightHip.y) > 0.1) { // Hips not level\n        if (this.onFormFeedback && Math.random() < 0.1) {\n          this.onFormFeedback({\n            message: \"Keep hips level!\",\n            type: \"warning\",\n            timestamp: currentTime\n          });\n        }\n      }\n\n    } catch (error) {\n      console.error('Error updating mountain climbers counter:', error);\n    }\n  }\n\n  updateBurpeesCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      // ŸÜŸÇÿßÿ∑ ÿßŸÑÿ±ÿ£ÿ≥ ŸàÿßŸÑŸäÿØŸäŸÜ\n      const nose = landmarks[config.NOSE || 0];\n      const leftWrist = landmarks[config.LEFT_WRIST || 15];\n      const rightWrist = landmarks[config.RIGHT_WRIST || 16];\n      const leftIndex = landmarks[config.LEFT_INDEX || 19];\n      const rightIndex = landmarks[config.RIGHT_INDEX || 20];\n      if (!nose || !leftWrist || !rightWrist) return;\n      // ÿ£ÿπŸÑŸâ ŸÜŸÇÿ∑ÿ© ŸÑŸÑÿ±ÿ£ÿ≥\n      const headY = nose.y;\n      // ÿ£ÿπŸÑŸâ ŸÜŸÇÿ∑ÿ© ŸÑŸÑŸäÿØ ÿ£Ÿà ÿßŸÑÿ£ÿµÿßÿ®ÿπ\n      const leftHandY = leftIndex ? leftIndex.y : leftWrist.y;\n      const rightHandY = rightIndex ? rightIndex.y : rightWrist.y;\n      // ÿ•ÿ∞ÿß ŸÉÿßŸÜÿ™ ÿßŸÑŸäÿØŸäŸÜ ÿ£Ÿà ÿßŸÑÿ£ÿµÿßÿ®ÿπ ÿ£ÿπŸÑŸâ ŸÖŸÜ ÿßŸÑÿ±ÿ£ÿ≥ (ÿ£ŸÇŸÑ ŸÅŸä ŸÇŸäŸÖÿ© y)\n      const handsAboveHead = (leftHandY < headY && rightHandY < headY);\n      // ŸÖŸÜÿ∑ŸÇ ÿßŸÑÿπÿØ\n      if (!this._burpeeState) this._burpeeState = 'ready';\n      if (this._burpeeState === 'ready') {\n        if (handsAboveHead) {\n          this._burpeeState = 'jumping';\n          this.pushupCount += 1;\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({\n              message: `Burpee ${this.pushupCount} - Hands above head!`,\n              type: 'success',\n              timestamp: Date.now()\n            });\n          }\n        }\n      } else if (this._burpeeState === 'jumping') {\n        if (!handsAboveHead) {\n          this._burpeeState = 'ready';\n        }\n      }\n    } catch (error) {\n      console.error('Error updating burpees counter:', error);\n    }\n  }\n\n  // Play warning sound\n  playWarningSound() {\n    try {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n      oscillator.type = 'sine';\n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.1);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + 0.5);\n    } catch (error) {\n      console.error('Error playing warning sound:', error);\n    }\n  }\n\n  // Draw pose landmarks on canvas\n  drawPoseOverlay(canvasCtx, results, canvasWidth, canvasHeight) {\n    if (!results.poseLandmarks || !canvasCtx) return;\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n    const landmarks = results.poseLandmarks;\n    landmarks.forEach((landmark) => {\n      if (landmark.visibility && landmark.visibility > 0.5) {\n        const x = landmark.x * canvasWidth;\n        const y = landmark.y * canvasHeight;\n        canvasCtx.beginPath();\n        canvasCtx.arc(x, y, 6, 0, 2 * Math.PI);\n        canvasCtx.fillStyle = landmark.visibility > 0.7 ? '#10B981' : '#F59E0B';\n        canvasCtx.fill();\n        canvasCtx.strokeStyle = '#FFFFFF';\n        canvasCtx.lineWidth = 2;\n        canvasCtx.stroke();\n      }\n    });\n    this.drawBasicConnections(canvasCtx, landmarks, canvasWidth, canvasHeight);\n    canvasCtx.restore();\n  }\n\n  // Draw basic pose connections\n  drawBasicConnections(canvasCtx, landmarks, canvasWidth, canvasHeight) {\n    const connections = [\n      [11, 12], [11, 13], [13, 15], [12, 14], [14, 16], [11, 23], [12, 24], [23, 24], [23, 25], [25, 27], [24, 26], [26, 28]\n    ];\n    connections.forEach(([startIdx, endIdx]) => {\n      const startPoint = landmarks[startIdx];\n      const endPoint = landmarks[endIdx];\n      if (startPoint && endPoint && startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n        canvasCtx.beginPath();\n        canvasCtx.moveTo(startPoint.x * canvasWidth, startPoint.y * canvasHeight);\n        canvasCtx.lineTo(endPoint.x * canvasWidth, endPoint.y * canvasHeight);\n        canvasCtx.strokeStyle = '#3B82F6';\n        canvasCtx.lineWidth = 3;\n        canvasCtx.stroke();\n      }\n    });\n  }\n\n  // Reset counter\n  resetCounter() {\n    this.pushupCount = 0;\n    this.pushupState = 'up';\n    this.postureStatus = 'unknown';\n    this.accumulatedCorrectMs = 0;\n    this.timerRunning = false;\n    this.startCorrectTimestampMs = 0;\n  }\n\n  // Get current stats\n  getStats() {\n    return {\n      count: this.pushupCount,\n      state: this.pushupState,\n      posture: this.postureStatus,\n      timeSec: Math.floor((this.accumulatedCorrectMs + (this.timerRunning ? (Date.now() - this.startCorrectTimestampMs) : 0)) / 1000)\n    };\n  }\n\n  // Get latest pose results for drawing\n  getLastResults() {\n    return this.lastResults;\n  }\n\n  // Set callback functions\n  setCallbacks({ onPushupCount, onPostureChange, onFormFeedback, onTimeUpdate }) {\n    this.onPushupCount = onPushupCount;\n    this.onPostureChange = onPostureChange;\n    this.onFormFeedback = onFormFeedback;\n    this.onTimeUpdate = onTimeUpdate;\n  }\n\n  // Cleanup\n  cleanup() {\n    if (this.pose) {\n      this.pose.close();\n      this.pose = null;\n    }\n    this.isInitialized = false;\n  }\n}\n\nexport default PoseDetectionUtils;\n"],"names":["PoseDetectionUtils","mode","normalized","_a","attempts","resolve","file","config","error","videoElement","results","_b","landmarks","isPostureCorrect","newPostureStatus","currentTime","cooldown","now","totalMs","seconds","point1","point2","point3","radians","angle","leftShoulder","leftHip","leftAnkle","vis","p","shoulderCenter","hipCenter","targetPoint","v1","v2","isGoodPosture","plankAngle","minPlankAngle","maxPlankAngle","leftElbow","leftWrist","armAngle","minArmAngle","maxArmAngle","leftKnee","legAngle","cosSim","mag1","mag2","absCos","pushupConfig","rightElbow","rightWrist","leftElbowAngle","rightElbowAngle","avgElbowAngle","avgShoulderY","downThreshold","upThreshold","shoulderHeightThreshold","pushupPosition","standingPosition","cfg","scfg","rightHip","rightKnee","rightAnkle","rightShoulder","hip","knee","ankle","shoulder","kneeAngleLeft","kneeAngleRight","kneeAngle","hipAngleLeft","hipAngleRight","hipAngle","hipAngleMin","hipY","kneeY","hipBelowKnee","hipAboveKnee","lcfg","leftKneeAngle","rightKneeAngle","leftKneeBent","frontKnee","backKnee","frontKneeAngle","backKneeAngle","hipBelowFrontKnee","lungePosition","leftKneeToHipY","rightKneeToHipY","KNEE_THRESHOLD","MIN_REP_TIME","leftKneeMove","rightKneeMove","isAlternating","leg","nose","leftIndex","rightIndex","headY","leftHandY","rightHandY","handsAboveHead","audioContext","oscillator","gainNode","canvasCtx","canvasWidth","canvasHeight","landmark","x","y","startIdx","endIdx","startPoint","endPoint","onPushupCount","onPostureChange","onFormFeedback","onTimeUpdate"],"mappings":"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"}