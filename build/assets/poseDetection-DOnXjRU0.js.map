{"version":3,"file":"poseDetection-DOnXjRU0.js","sources":["../../src/utils/poseDetection.js"],"sourcesContent":["// Pose detection utilities using MediaPipe\nclass PoseDetectionUtils {\n  constructor() {\n    this.pose = null;\n    this.isInitialized = false;\n    this.pushupState = 'up'; // up, down, transition\n    this.pushupCount = 0;\n    this.postureStatus = 'unknown'; // correct, incorrect, unknown\n    this.lastWarningTime = 0;\n    this.videoDimensionsLogged = false;\n    // Exercise mode and timing\n    this.exerciseMode = 'pushups'; // 'pushups' | 'plank' | 'squats' | 'lunges'\n    this.accumulatedCorrectMs = 0;\n    this.timerRunning = false;\n    this.startCorrectTimestampMs = 0;\n    this.onPushupCount = null;\n    this.onPostureChange = null;\n    this.onFormFeedback = null;\n    this.onTimeUpdate = null; // for plank seconds updates\n  }\n\n  setExerciseMode(mode) {\n    const normalized = String(mode || '').toLowerCase();\n    if (normalized === 'plank') this.exerciseMode = 'plank';\n    else if (normalized === 'squats' || normalized === 'squat') this.exerciseMode = 'squats';\n    else if (normalized === 'lunges' || normalized === 'lunge') this.exerciseMode = 'lunges';\n    else if (normalized === 'burpees' || normalized === 'burpee') this.exerciseMode = 'burpees';\n    else if (normalized.includes('mountain') || normalized.includes('climber')) this.exerciseMode = 'mountainclimbers';\n    else this.exerciseMode = 'pushups';\n  }\n\n  // Initialize MediaPipe Pose\n  async initialize() {\n    try {\n      console.log('üöÄ Initializing MediaPipe Pose...');\n      \n      // Wait for MediaPipe to load if not ready\n      if (!window.Pose) {\n        console.warn('MediaPipe Pose not loaded yet, waiting...');\n        // Wait up to 10 seconds for MediaPipe to load\n        let attempts = 0;\n        while (!window.Pose && attempts < 50) {\n          await new Promise(resolve => setTimeout(resolve, 200));\n          attempts++;\n          if (attempts % 10 === 0) {\n            console.log(`Still waiting for MediaPipe... (${attempts * 200}ms)`);\n          }\n        }\n        \n        if (!window.Pose) {\n          console.error('MediaPipe Pose failed to load after waiting');\n          return false;\n        }\n      }\n      \n      console.log('‚úÖ MediaPipe Pose found in window object');\n\n      this.pose = new window.Pose({\n        locateFile: (file) => {\n          return `https://cdn.jsdelivr.net/npm/@mediapipe/pose/${file}`;\n        }\n      });\n\n      const config = window.MediaPipeConfig?.POSE_CONFIG || {\n        modelComplexity: 0,\n        smoothLandmarks: true,\n        enableSegmentation: false,\n        smoothSegmentation: false,\n        minDetectionConfidence: 0.5,\n        minTrackingConfidence: 0.5\n      };\n\n      this.pose.setOptions(config);\n      this.pose.onResults(this.onResults.bind(this));\n      \n      this.isInitialized = true;\n      console.log('MediaPipe Pose initialized successfully');\n      return true;\n    } catch (error) {\n      console.error('Failed to initialize MediaPipe Pose:', error);\n      return false;\n    }\n  }\n\n  // Process video frame\n  async processFrame(videoElement) {\n    if (!this.isInitialized || !this.pose) {\n      console.log('‚ùå Pose not initialized or missing');\n      return null;\n    }\n\n    try {\n      // Only log occasionally to avoid spam\n      if (Math.random() < 0.05) {\n        console.log('üìπ Processing frame...');\n      }\n      \n      // Check if video dimensions are reasonable\n      if (videoElement.videoWidth === 0 || videoElement.videoHeight === 0) {\n        if (Math.random() < 0.1) {\n          console.log('‚è≥ Video dimensions not ready yet');\n        }\n        return;\n      }\n      \n      // Log video dimensions only once per session\n      if (!this.videoDimensionsLogged) {\n        console.log(`üìè Video dimensions: ${videoElement.videoWidth}x${videoElement.videoHeight}`);\n        this.videoDimensionsLogged = true;\n      }\n      \n      // Allow larger videos but with a reasonable limit\n      const maxWidth = 1920;\n      const maxHeight = 1080;\n      if (videoElement.videoWidth > maxWidth || videoElement.videoHeight > maxHeight) {\n        console.log('‚ö†Ô∏è Video too large (>1920x1080), skipping frame');\n        return;\n      }\n      \n      await this.pose.send({ image: videoElement });\n    } catch (error) {\n      if (error.message?.includes('memory access out of bounds')) {\n        console.warn('üîÑ Memory error, skipping frame');\n        return;\n      }\n      console.error('Error processing frame:', error);\n    }\n  }\n\n  // Handle pose detection results\n  onResults(results) {\n    console.log('üéØ onResults called!', results.poseLandmarks ? `Found ${results.poseLandmarks.length} landmarks` : 'No landmarks');\n    \n    // Store results for drawing\n    this.lastResults = results;\n    \n    if (!results.poseLandmarks) {\n      this.postureStatus = 'unknown';\n      if (this.onPostureChange) {\n        this.onPostureChange('unknown', null);\n      }\n      // Stop plank timer if running\n      if (this.timerRunning) {\n        this.accumulatedCorrectMs += Date.now() - this.startCorrectTimestampMs;\n        this.timerRunning = false;\n        this.startCorrectTimestampMs = 0;\n        if (this.onTimeUpdate) {\n          this.onTimeUpdate(Math.floor(this.accumulatedCorrectMs / 1000));\n        }\n      }\n      return;\n    }\n\n    const landmarks = results.poseLandmarks;\n    \n    // For squats, lunges, pushups, burpees: always show correct posture to avoid confusion\n    if (this.exerciseMode === 'squats' || this.exerciseMode === 'lunges' || this.exerciseMode === 'pushups' || this.exerciseMode === 'burpees') {\n      this.postureStatus = 'correct';\n      if (this.onPostureChange) {\n        this.onPostureChange('correct', landmarks);\n      }\n    } else {\n      // Check posture for other exercises\n      const isPostureCorrect = this.checkBackAlignment(landmarks);\n      const newPostureStatus = isPostureCorrect ? 'correct' : 'incorrect';\n      \n      if (newPostureStatus !== this.postureStatus) {\n        this.postureStatus = newPostureStatus;\n        if (this.onPostureChange) {\n          this.onPostureChange(this.postureStatus, landmarks);\n        }\n      }\n\n      // Handle posture warnings for plank only (pushups now work like squats/lunges)\n      if (!isPostureCorrect) {\n        const currentTime = Date.now();\n        const cooldown = window.MediaPipeConfig?.PLANK_CONFIG?.WARNING_COOLDOWN || 2000;\n        \n        if (currentTime - this.lastWarningTime > cooldown) {\n          this.playWarningSound();\n          this.lastWarningTime = currentTime;\n          \n          if (this.onFormFeedback) {\n            this.onFormFeedback({\n              message: \"Dangerous posture - straighten your back!\",\n              type: \"warning\",\n              timestamp: currentTime\n            });\n          }\n        }\n        // Stop plank timer while incorrect\n        if (this.exerciseMode === 'plank' && this.timerRunning) {\n          this.accumulatedCorrectMs += currentTime - this.startCorrectTimestampMs;\n          this.timerRunning = false;\n          this.startCorrectTimestampMs = 0;\n          if (this.onTimeUpdate) {\n            this.onTimeUpdate(Math.floor(this.accumulatedCorrectMs / 1000));\n          }\n        }\n        return; // Don't count reps with bad posture for plank only\n      }\n    }\n\n    // Posture is correct\n    if (this.exerciseMode === 'plank') {\n      const now = Date.now();\n      if (!this.timerRunning) {\n        this.startCorrectTimestampMs = now;\n        this.timerRunning = true;\n      }\n      const totalMs = this.accumulatedCorrectMs + (now - (this.startCorrectTimestampMs || now));\n      const seconds = Math.floor(totalMs / 1000);\n      if (this.onTimeUpdate) this.onTimeUpdate(seconds);\n      return;\n    }\n\n    // Count reps depending on mode\n      if (this.exerciseMode === 'squats') {\n        this.updateSquatCounter(landmarks);\n      } else if (this.exerciseMode === 'lunges') {\n        this.updateLungesCounter(landmarks);\n      } else if (this.exerciseMode === 'burpees') {\n        this.updateBurpeesCounter(landmarks);\n      } else if (this.exerciseMode === 'mountainclimbers') {\n        this.updateMountainClimbersCounter(landmarks);\n      } else {\n        this.updatePushupCounter(landmarks);\n      }\n  }\n\n  // Calculate angle between three points\n  calculateAngle(point1, point2, point3) {\n    const radians = Math.atan2(point3.y - point2.y, point3.x - point2.x) - \n                   Math.atan2(point1.y - point2.y, point1.x - point2.x);\n    let angle = Math.abs(radians * 180.0 / Math.PI);\n    \n    if (angle > 180.0) {\n      angle = 360 - angle;\n    }\n    \n    return angle;\n  }\n\n  // Check back alignment for posture\n  checkBackAlignment(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      \n      const leftShoulder = landmarks[config.LEFT_SHOULDER || 11];\n      const rightShoulder = landmarks[config.RIGHT_SHOULDER || 12];\n      const leftHip = landmarks[config.LEFT_HIP || 23];\n      const rightHip = landmarks[config.RIGHT_HIP || 24];\n      const leftKnee = landmarks[config.LEFT_KNEE || 25];\n      const rightKnee = landmarks[config.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[config.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[config.RIGHT_ANKLE || 28];\n\n      // Require visibility\n      const vis = (p) => p && (p.visibility == null || p.visibility > 0.5);\n      if (!vis(leftShoulder) || !vis(rightShoulder) || !vis(leftHip) || !vis(rightHip) || !vis(leftKnee) || !vis(rightKnee)) {\n        return false;\n      }\n\n      // Calculate center points\n      const shoulderCenter = {\n        x: (leftShoulder.x + rightShoulder.x) / 2,\n        y: (leftShoulder.y + rightShoulder.y) / 2\n      };\n      \n      const hipCenter = {\n        x: (leftHip.x + rightHip.x) / 2,\n        y: (leftHip.y + rightHip.y) / 2\n      };\n      \n      const kneeCenter = {\n        x: (leftKnee.x + rightKnee.x) / 2,\n        y: (leftKnee.y + rightKnee.y) / 2\n      };\n      const ankleCenter = (vis(leftAnkle) && vis(rightAnkle)) ? {\n        x: (leftAnkle.x + rightAnkle.x) / 2,\n        y: (leftAnkle.y + rightAnkle.y) / 2\n      } : null;\n\n      // Vectors for straightness\n      const targetPoint = ankleCenter || kneeCenter;\n      const v1 = { x: shoulderCenter.x - hipCenter.x, y: shoulderCenter.y - hipCenter.y };\n      const v2 = targetPoint ? { x: targetPoint.x - hipCenter.x, y: targetPoint.y - hipCenter.y } : null;\n\n      let isGoodPosture = false;\n      if (this.exerciseMode === 'plank') {\n        // Plank: near-horizontal straight line + knee straightness\n        let cosSim = -1;\n        if (v2) {\n          const mag1 = Math.hypot(v1.x, v1.y) || 1;\n          const mag2 = Math.hypot(v2.x, v2.y) || 1;\n          cosSim = (v1.x * v2.x + v1.y * v2.y) / (mag1 * mag2);\n        }\n        const cfg = window.MediaPipeConfig?.PLANK_CONFIG || {};\n        const absCos = Math.abs(Math.max(-1, Math.min(1, cosSim)));\n        const straightEnough = v2 ? (absCos >= (cfg.STRAIGHT_ABS_COS_MIN ?? 0.90)) : false;\n        const dx = shoulderCenter.x - hipCenter.x;\n        const dy = shoulderCenter.y - hipCenter.y;\n        const orientDeg = Math.abs(Math.atan2(dy, dx) * 180 / Math.PI);\n        const horizMax = cfg.HORIZ_MAX_DEG ?? 35;\n        const nearHorizontal = (orientDeg <= horizMax) || (orientDeg >= (180 - horizMax));\n        let kneeOk = true;\n        if (ankleCenter) {\n          const leftKneeAngle = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n          const rightKneeAngle = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n          const kneeMin = cfg.KNEE_MIN_DEG ?? 150;\n          kneeOk = (leftKneeAngle >= kneeMin) && (rightKneeAngle >= kneeMin);\n        }\n        isGoodPosture = straightEnough && nearHorizontal && kneeOk;\n      } else if (this.exerciseMode === 'squats') {\n        // Squats: ensure hip angle not collapsed and torso tilt within range\n        const scfg = window.MediaPipeConfig?.SQUAT_CONFIG || {};\n        const hipAngleLeft = this.calculateAngle(leftShoulder, leftHip, leftKnee);\n        const hipAngleRight = this.calculateAngle(rightShoulder, rightHip, rightKnee);\n        const hipAngle = (hipAngleLeft + hipAngleRight) / 2;\n        const hipAngleMin = scfg.HIP_ANGLE_MIN ?? 150;\n        const dx = shoulderCenter.x - hipCenter.x;\n        const dy = shoulderCenter.y - hipCenter.y;\n        // Angle relative to vertical (0 is perfectly vertical torso)\n        const torsoTiltDeg = Math.abs(Math.atan2(dx, -dy) * 180 / Math.PI);\n        const tiltMax = scfg.TORSO_TILT_MAX ?? 45;\n        isGoodPosture = (hipAngle >= hipAngleMin) && (torsoTiltDeg <= tiltMax);\n      } else {\n        // Push-ups: straight line check using abs(cos)\n        let cosSim = -1;\n        if (v2) {\n          const mag1 = Math.hypot(v1.x, v1.y) || 1;\n          const mag2 = Math.hypot(v2.x, v2.y) || 1;\n          cosSim = (v1.x * v2.x + v1.y * v2.y) / (mag1 * mag2);\n        }\n        const absCos = Math.abs(Math.max(-1, Math.min(1, cosSim)));\n        isGoodPosture = v2 ? (absCos >= 0.90) : false;\n      }\n\n      console.log(`üèÉ Posture(${this.exerciseMode}): ${isGoodPosture ? 'GOOD' : 'BAD'}`);\n      \n      return isGoodPosture;\n    } catch (error) {\n      console.error('Error checking back alignment:', error);\n      return false;\n    }\n  }\n\n  // Update push-up counter\n  updatePushupCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const pushupConfig = window.MediaPipeConfig?.PUSHUP_CONFIG || {};\n      \n      const leftShoulder = landmarks[config.LEFT_SHOULDER || 11];\n      const leftElbow = landmarks[config.LEFT_ELBOW || 13];\n      const leftWrist = landmarks[config.LEFT_WRIST || 15];\n      const rightShoulder = landmarks[config.RIGHT_SHOULDER || 12];\n      const rightElbow = landmarks[config.RIGHT_ELBOW || 14];\n      const rightWrist = landmarks[config.RIGHT_WRIST || 16];\n\n      if (!leftShoulder || !leftElbow || !leftWrist || !rightShoulder || !rightElbow || !rightWrist) {\n        return;\n      }\n\n      // Calculate elbow angles\n      const leftElbowAngle = this.calculateAngle(leftShoulder, leftElbow, leftWrist);\n      const rightElbowAngle = this.calculateAngle(rightShoulder, rightElbow, rightWrist);\n      const avgElbowAngle = (leftElbowAngle + rightElbowAngle) / 2;\n\n      // Average shoulder position (for height detection)\n      const avgShoulderY = (leftShoulder.y + rightShoulder.y) / 2;\n\n      const downThreshold = pushupConfig.ELBOW_ANGLE_DOWN || 95;\n      const upThreshold = pushupConfig.ELBOW_ANGLE_UP || 155;\n      const shoulderHeightThreshold = pushupConfig.SHOULDER_HEIGHT_DOWN || 0.02;\n\n      // Push-up position: elbows bent OR shoulders close to ground\n      const pushupPosition = (avgElbowAngle <= downThreshold) || (avgShoulderY >= (1 - shoulderHeightThreshold));\n      \n      // Standing position: elbows straight\n      const standingPosition = avgElbowAngle >= upThreshold;\n\n      // Simple counting: count immediately when going down (like squats and lunges)\n      if (this.pushupState === 'up') {\n        if (pushupPosition) {\n          this.pushupState = 'down';\n          this.pushupCount += 1; // Count immediately on descent\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Push-up ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (standingPosition) {\n          this.pushupState = 'up'; // Reset state for next rep\n        }\n      }\n    } catch (error) {\n      console.error('Error updating push-up counter:', error);\n    }\n  }\n\n  // Update squat counter\n  updateSquatCounter(landmarks) {\n    try {\n      const cfg = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const scfg = window.MediaPipeConfig?.SQUAT_CONFIG || {};\n\n      const leftHip = landmarks[cfg.LEFT_HIP || 23];\n      const rightHip = landmarks[cfg.RIGHT_HIP || 24];\n      const leftKnee = landmarks[cfg.LEFT_KNEE || 25];\n      const rightKnee = landmarks[cfg.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[cfg.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[cfg.RIGHT_ANKLE || 28];\n      const leftShoulder = landmarks[cfg.LEFT_SHOULDER || 11];\n      const rightShoulder = landmarks[cfg.RIGHT_SHOULDER || 12];\n\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle || !leftShoulder || !rightShoulder) return;\n\n      // Average sides for stability\n      const hip = { x: (leftHip.x + rightHip.x) / 2, y: (leftHip.y + rightHip.y) / 2 };\n      const knee = { x: (leftKnee.x + rightKnee.x) / 2, y: (leftKnee.y + rightKnee.y) / 2 };\n      const ankle = { x: (leftAnkle.x + rightAnkle.x) / 2, y: (leftAnkle.y + rightAnkle.y) / 2 };\n      const shoulder = { x: (leftShoulder.x + rightShoulder.x) / 2, y: (leftShoulder.y + rightShoulder.y) / 2 };\n\n      // Knee angle using hip-knee-ankle\n      const kneeAngleLeft = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n      const kneeAngleRight = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n      const kneeAngle = (kneeAngleLeft + kneeAngleRight) / 2;\n\n      // Hip angle shoulder-hip-knee to detect rounding/collapse\n      const hipAngleLeft = this.calculateAngle(leftShoulder, leftHip, leftKnee);\n      const hipAngleRight = this.calculateAngle(rightShoulder, rightHip, rightKnee);\n      const hipAngle = (hipAngleLeft + hipAngleRight) / 2;\n\n      const downThreshold = scfg.KNEE_ANGLE_DOWN ?? 80;\n      const upThreshold = scfg.KNEE_ANGLE_UP ?? 165;\n      const hipAngleMin = scfg.HIP_ANGLE_MIN ?? 150;\n\n      // Count based on hip position (lower back points)\n      const hipY = hip.y; // Y position of hips (lower = deeper)\n      const kneeY = knee.y; // Y position of knees\n      \n      // Hip goes below knee level = deep squat\n      const hipBelowKnee = hipY > kneeY;\n      // Hip goes back up above knee level = standing\n      const hipAboveKnee = hipY < kneeY;\n\n      // State machine: count when hip goes down below knee level\n      if (this.pushupState === 'up') {\n        if (hipBelowKnee) {\n          this.pushupState = 'down';\n          this.pushupCount += 1;\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Squat ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (hipAboveKnee) {\n          this.pushupState = 'up';\n        }\n      }\n    } catch (error) {\n      console.error('Error updating squat counter:', error);\n    }\n  }\n\n  // Update lunges counter\n  updateLungesCounter(landmarks) {\n    try {\n      const cfg = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      const lcfg = window.MediaPipeConfig?.LUNGES_CONFIG || {};\n\n      const leftHip = landmarks[cfg.LEFT_HIP || 23];\n      const rightHip = landmarks[cfg.RIGHT_HIP || 24];\n      const leftKnee = landmarks[cfg.LEFT_KNEE || 25];\n      const rightKnee = landmarks[cfg.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[cfg.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[cfg.RIGHT_ANKLE || 28];\n\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle) return;\n\n      // Average hip position\n      const hip = { x: (leftHip.x + rightHip.x) / 2, y: (leftHip.y + rightHip.y) / 2 };\n\n      // Calculate knee angles\n      const leftKneeAngle = this.calculateAngle(leftHip, leftKnee, leftAnkle);\n      const rightKneeAngle = this.calculateAngle(rightHip, rightKnee, rightAnkle);\n\n      // Determine which leg is front (more bent knee)\n      const leftKneeBent = leftKneeAngle < rightKneeAngle;\n      const frontKnee = leftKneeBent ? leftKnee : rightKnee;\n      const backKnee = leftKneeBent ? rightKnee : leftAnkle;\n      const frontKneeAngle = leftKneeBent ? leftKneeAngle : rightKneeAngle;\n      const backKneeAngle = leftKneeBent ? rightKneeAngle : leftKneeAngle;\n\n      // Hip position relative to front knee\n      const hipBelowFrontKnee = hip.y > frontKnee.y;\n\n      const frontKneeDownThreshold = lcfg.FRONT_KNEE_ANGLE_DOWN ?? 85;\n      const frontKneeUpThreshold = lcfg.FRONT_KNEE_ANGLE_UP ?? 160;\n      const backKneeDownThreshold = lcfg.BACK_KNEE_ANGLE_DOWN ?? 90;\n      const backKneeUpThreshold = lcfg.BACK_KNEE_ANGLE_UP ?? 150;\n\n      // Lunge position: either knee bent enough OR hips go down (very lenient)\n      const lungePosition = ((frontKneeAngle <= frontKneeDownThreshold) || \n                            (backKneeAngle <= backKneeDownThreshold) || \n                            hipBelowFrontKnee);\n      \n      // Standing position: both knees straight\n      const standingPosition = (frontKneeAngle >= frontKneeUpThreshold) && \n                              (backKneeAngle >= backKneeUpThreshold);\n\n      // Simple counting: count immediately when going down (like squats)\n      if (this.pushupState === 'up') {\n        if (lungePosition) {\n          this.pushupState = 'down';\n          this.pushupCount += 1; // Count immediately on descent\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({ message: `Lunge ${this.pushupCount}`, type: 'success', timestamp: Date.now() });\n          }\n        }\n      } else if (this.pushupState === 'down') {\n        if (standingPosition) {\n          this.pushupState = 'up'; // Reset state for next rep\n        }\n      }\n    } catch (error) {\n      console.error('Error updating lunges counter:', error);\n    }\n  }\n\n  // Add Burpees counter\n  // Update mountain climbers counter\n  updateMountainClimbersCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      \n      // Get key body points\n      const leftHip = landmarks[config.LEFT_HIP || 23];\n      const rightHip = landmarks[config.RIGHT_HIP || 24];\n      const leftKnee = landmarks[config.LEFT_KNEE || 25];\n      const rightKnee = landmarks[config.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[config.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[config.RIGHT_ANKLE || 28];\n\n      if (!leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle) return;\n\n      // Calculate vertical distances between knees and hips\n      const leftKneeToHipY = Math.abs(leftKnee.y - leftHip.y);\n      const rightKneeToHipY = Math.abs(rightKnee.y - rightHip.y);\n\n      // Initialize states if needed\n      if (!this._lastLeftKneeY) this._lastLeftKneeY = leftKnee.y;\n      if (!this._lastRightKneeY) this._lastRightKneeY = rightKnee.y;\n      if (!this._climberState) this._climberState = 'neutral';\n      if (!this._lastClimberTime) this._lastClimberTime = Date.now();\n      \n      const KNEE_THRESHOLD = 0.05; // How far the knee needs to move\n      const MIN_REP_TIME = 250; // Minimum time between reps (ms)\n      const currentTime = Date.now();\n\n      // Calculate knee movements\n      const leftKneeMove = leftKnee.y - this._lastLeftKneeY;\n      const rightKneeMove = rightKnee.y - this._lastRightKneeY;\n\n      // Check for significant knee movements in opposite directions\n      const isAlternating = (leftKneeMove > KNEE_THRESHOLD && rightKneeMove < -KNEE_THRESHOLD) ||\n                           (leftKneeMove < -KNEE_THRESHOLD && rightKneeMove > KNEE_THRESHOLD);\n\n      // State machine for counting alternating leg movements\n      if (this._climberState === 'neutral') {\n        if (isAlternating && (currentTime - this._lastClimberTime > MIN_REP_TIME)) {\n          this._climberState = 'moving';\n          this._lastClimberTime = currentTime;\n          // Count the rep\n          this.pushupCount += 1;\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            const leg = leftKneeMove > rightKneeMove ? 'Left' : 'Right';\n            this.onFormFeedback({\n              message: `${leg} knee drive - Rep ${this.pushupCount}`,\n              type: 'success',\n              timestamp: currentTime\n            });\n          }\n        }\n      } else if (this._climberState === 'moving') {\n        if (!isAlternating) {\n          this._climberState = 'neutral';\n        }\n      }\n\n      // Update last positions\n      this._lastLeftKneeY = leftKnee.y;\n      this._lastRightKneeY = rightKnee.y;\n\n      // Form feedback for incorrect movement\n      if (Math.abs(leftHip.y - rightHip.y) > 0.1) { // Hips not level\n        if (this.onFormFeedback && Math.random() < 0.1) {\n          this.onFormFeedback({\n            message: \"Keep hips level!\",\n            type: \"warning\",\n            timestamp: currentTime\n          });\n        }\n      }\n\n    } catch (error) {\n      console.error('Error updating mountain climbers counter:', error);\n    }\n  }\n\n  updateBurpeesCounter(landmarks) {\n    try {\n      const config = window.MediaPipeConfig?.POSE_LANDMARKS || {};\n      \n      // Get key body points\n      const leftShoulder = landmarks[config.LEFT_SHOULDER || 11];\n      const rightShoulder = landmarks[config.RIGHT_SHOULDER || 12];\n      const leftHip = landmarks[config.LEFT_HIP || 23];\n      const rightHip = landmarks[config.RIGHT_HIP || 24];\n      const leftKnee = landmarks[config.LEFT_KNEE || 25];\n      const rightKnee = landmarks[config.RIGHT_KNEE || 26];\n      const leftAnkle = landmarks[config.LEFT_ANKLE || 27];\n      const rightAnkle = landmarks[config.RIGHT_ANKLE || 28];\n\n      if (!leftShoulder || !rightShoulder || !leftHip || !rightHip || !leftKnee || !rightKnee || !leftAnkle || !rightAnkle) return;\n\n      // Calculate average Y positions for body parts\n      const shoulderY = (leftShoulder.y + rightShoulder.y) / 2;\n      const hipY = (leftHip.y + rightHip.y) / 2;\n      const kneeY = (leftKnee.y + rightKnee.y) / 2;\n      const ankleY = (leftAnkle.y + rightAnkle.y) / 2;\n\n      // Initialize state if needed\n      if (!this._lastAnkleY) this._lastAnkleY = ankleY;\n      if (!this._lastShoulderY) this._lastShoulderY = shoulderY;\n      if (!this._burpeeState) this._burpeeState = 'ready';\n      if (!this._jumpStartTime) this._jumpStartTime = Date.now();\n      \n      // Constants for jump detection\n      const JUMP_THRESHOLD = 0.05; // How high they need to jump (smaller = more sensitive)\n      const MIN_JUMP_TIME = 300; // Minimum time between jumps (ms)\n      const currentTime = Date.now();\n\n      // Calculate vertical movement\n      const ankleMovement = this._lastAnkleY - ankleY;\n      const shoulderMovement = this._lastShoulderY - shoulderY;\n\n      // Detect jump (both ankles and shoulders should move up significantly)\n      const isJumping = ankleMovement > JUMP_THRESHOLD && shoulderMovement > JUMP_THRESHOLD;\n      \n      // State machine for jump counting\n      if (this._burpeeState === 'ready') {\n        if (isJumping && (currentTime - this._jumpStartTime > MIN_JUMP_TIME)) {\n          this._burpeeState = 'jumping';\n          this._jumpStartTime = currentTime;\n          // Count the rep and notify\n          this.pushupCount += 1;\n          if (this.onPushupCount) this.onPushupCount(this.pushupCount);\n          if (this.onFormFeedback) {\n            this.onFormFeedback({\n              message: `Burpee ${this.pushupCount} - Good jump!`,\n              type: 'success',\n              timestamp: currentTime\n            });\n          }\n        }\n      } else if (this._burpeeState === 'jumping') {\n        // Reset to ready when they land\n        if (!isJumping) {\n          this._burpeeState = 'ready';\n        }\n      }\n\n      // Update last positions\n      this._lastAnkleY = ankleY;\n      this._lastShoulderY = shoulderY;\n\n      // Debug feedback for incorrect movement\n      if (ankleMovement > 0 && shoulderMovement <= 0) {\n        if (this.onFormFeedback && Math.random() < 0.1) { // Show occasionally\n          this.onFormFeedback({\n            message: \"Jump with your whole body!\",\n            type: \"warning\",\n            timestamp: currentTime\n          });\n        }\n      }\n\n    } catch (error) {\n      console.error('Error updating burpees counter:', error);\n    }\n  }\n\n  // Play warning sound\n  playWarningSound() {\n    try {\n      const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n      const oscillator = audioContext.createOscillator();\n      const gainNode = audioContext.createGain();\n      \n      oscillator.connect(gainNode);\n      gainNode.connect(audioContext.destination);\n      \n      oscillator.frequency.setValueAtTime(800, audioContext.currentTime);\n      oscillator.type = 'sine';\n      \n      gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n      gainNode.gain.linearRampToValueAtTime(0.3, audioContext.currentTime + 0.1);\n      gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);\n      \n      oscillator.start(audioContext.currentTime);\n      oscillator.stop(audioContext.currentTime + 0.5);\n    } catch (error) {\n      console.error('Error playing warning sound:', error);\n    }\n  }\n\n  // Draw pose landmarks on canvas\n  drawPoseOverlay(canvasCtx, results, canvasWidth, canvasHeight) {\n    // Only log occasionally to avoid spam\n    if (Math.random() < 0.05) {\n      console.log('üé® Drawing pose overlay with', results.poseLandmarks?.length || 0, 'landmarks');\n    }\n\n    if (!results.poseLandmarks || !canvasCtx) {\n      return;\n    }\n\n    canvasCtx.save();\n    canvasCtx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    // Draw landmarks\n    const landmarks = results.poseLandmarks;\n    let drawnLandmarks = 0;\n    \n    landmarks.forEach((landmark, index) => {\n      if (landmark.visibility && landmark.visibility > 0.5) {\n        const x = landmark.x * canvasWidth;\n        const y = landmark.y * canvasHeight;\n        \n        canvasCtx.beginPath();\n        canvasCtx.arc(x, y, 6, 0, 2 * Math.PI); // Bigger circles\n        canvasCtx.fillStyle = landmark.visibility > 0.7 ? '#10B981' : '#F59E0B';\n        canvasCtx.fill();\n        canvasCtx.strokeStyle = '#FFFFFF';\n        canvasCtx.lineWidth = 2;\n        canvasCtx.stroke();\n        drawnLandmarks++;\n      }\n    });\n\n    // Only log occasionally\n    if (Math.random() < 0.1) {\n      console.log('‚ú® Drew', drawnLandmarks, 'landmarks');\n    }\n\n    // Always use basic connections (more reliable)\n    this.drawBasicConnections(canvasCtx, landmarks, canvasWidth, canvasHeight);\n\n    canvasCtx.restore();\n  }\n\n  // Draw basic pose connections\n  drawBasicConnections(canvasCtx, landmarks, canvasWidth, canvasHeight) {\n    const connections = [\n      [11, 12], // shoulders\n      [11, 13], // left shoulder to elbow\n      [13, 15], // left elbow to wrist\n      [12, 14], // right shoulder to elbow\n      [14, 16], // right elbow to wrist\n      [11, 23], // left shoulder to hip\n      [12, 24], // right shoulder to hip\n      [23, 24], // hips\n      [23, 25], // left hip to knee\n      [25, 27], // left knee to ankle\n      [24, 26], // right hip to knee\n      [26, 28]  // right knee to ankle\n    ];\n\n    let drawnConnections = 0;\n    connections.forEach(([startIdx, endIdx]) => {\n      const startPoint = landmarks[startIdx];\n      const endPoint = landmarks[endIdx];\n\n      if (startPoint && endPoint && \n          startPoint.visibility > 0.5 && endPoint.visibility > 0.5) {\n        canvasCtx.beginPath();\n        canvasCtx.moveTo(startPoint.x * canvasWidth, startPoint.y * canvasHeight);\n        canvasCtx.lineTo(endPoint.x * canvasWidth, endPoint.y * canvasHeight);\n        canvasCtx.strokeStyle = '#3B82F6';\n        canvasCtx.lineWidth = 3; // Thicker lines\n        canvasCtx.stroke();\n        drawnConnections++;\n      }\n    });\n    \n    // Only log occasionally\n    if (Math.random() < 0.02) {\n      console.log('‚úÖ Drawing completed!', drawnConnections, 'connections');\n    }\n  }\n\n  // Reset counter\n  resetCounter() {\n    this.pushupCount = 0;\n    this.pushupState = 'up';\n    this.postureStatus = 'unknown';\n    // Reset plank timing\n    this.accumulatedCorrectMs = 0;\n    this.timerRunning = false;\n    this.startCorrectTimestampMs = 0;\n  }\n\n  // Get current stats\n  getStats() {\n    return {\n      count: this.pushupCount,\n      state: this.pushupState,\n      posture: this.postureStatus,\n      timeSec: Math.floor((this.accumulatedCorrectMs + (this.timerRunning ? (Date.now() - this.startCorrectTimestampMs) : 0)) / 1000)\n    };\n  }\n\n  // Get latest pose results for drawing\n  getLastResults() {\n    return this.lastResults;\n  }\n\n  // Set callback functions\n  setCallbacks({ onPushupCount, onPostureChange, onFormFeedback, onTimeUpdate }) {\n    this.onPushupCount = onPushupCount;\n    this.onPostureChange = onPostureChange;\n    this.onFormFeedback = onFormFeedback;\n    this.onTimeUpdate = onTimeUpdate;\n  }\n\n  // Cleanup\n  cleanup() {\n    if (this.pose) {\n      this.pose.close();\n      this.pose = null;\n    }\n    this.isInitialized = false;\n  }\n}\n\nexport default PoseDetectionUtils;\n"],"names":["PoseDetectionUtils","mode","normalized","_a","attempts","resolve","file","config","error","videoElement","results","_b","landmarks","isPostureCorrect","newPostureStatus","currentTime","cooldown","now","totalMs","seconds","point1","point2","point3","radians","angle","_c","leftShoulder","rightShoulder","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle","vis","p","shoulderCenter","hipCenter","kneeCenter","ankleCenter","targetPoint","v1","v2","isGoodPosture","cosSim","mag1","mag2","cfg","absCos","straightEnough","dx","dy","orientDeg","horizMax","nearHorizontal","kneeOk","leftKneeAngle","rightKneeAngle","kneeMin","scfg","hipAngleLeft","hipAngleRight","hipAngle","hipAngleMin","torsoTiltDeg","tiltMax","pushupConfig","leftElbow","leftWrist","rightElbow","rightWrist","leftElbowAngle","rightElbowAngle","avgElbowAngle","avgShoulderY","downThreshold","upThreshold","shoulderHeightThreshold","pushupPosition","standingPosition","hip","knee","ankle","shoulder","kneeAngleLeft","kneeAngleRight","kneeAngle","hipY","kneeY","hipBelowKnee","hipAboveKnee","lcfg","leftKneeBent","frontKnee","backKnee","frontKneeAngle","backKneeAngle","hipBelowFrontKnee","frontKneeDownThreshold","frontKneeUpThreshold","backKneeDownThreshold","backKneeUpThreshold","lungePosition","leftKneeToHipY","rightKneeToHipY","KNEE_THRESHOLD","MIN_REP_TIME","leftKneeMove","rightKneeMove","isAlternating","leg","shoulderY","ankleY","JUMP_THRESHOLD","MIN_JUMP_TIME","ankleMovement","shoulderMovement","isJumping","audioContext","oscillator","gainNode","canvasCtx","canvasWidth","canvasHeight","drawnLandmarks","landmark","index","x","y","connections","drawnConnections","startIdx","endIdx","startPoint","endPoint","onPushupCount","onPostureChange","onFormFeedback","onTimeUpdate"],"mappings":"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"}